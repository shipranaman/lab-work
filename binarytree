#include<iostream>
using namespace std;
#include<vector>
#include<queue>
#include<stack>

class node
{
    public:
    int data;
    node* left;
    node* right;
    node(int value)
    {
        data=value;
        left=nullptr;
        right=nullptr;
    }

};
node* create_tree()
{
    int x;
    cin>>x;
    if(x==-1)
    {
        return nullptr;
    }
    node* temp=new node(x);
    temp->left=create_tree();
    temp->right=create_tree();
    return temp;


}
void preorder(node* root)
{
    if(root==nullptr)
    return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
    return;
}
void inorder(node* root)
{
    if(root==nullptr)
    return;
   
    inorder(root->left);
     cout<<root->data<<" ";
    inorder(root->right);
    return;
}
void postorder(node* root)
{
     if(root==nullptr)
    return;
   
    postorder(root->left);
    postorder(root->right);
     cout<<root->data<<" ";
    return;
}
vector<int>level_order(node* root)
{
    queue<node*>q;
    q.push(root);
    vector<int>ans;
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        ans.push_back(temp->data);
        if(temp->left)
        {
            q.push(temp->left);
        }
        else{
            q.push(temp->right);
        }
        return ans;
    }

}
vector<int>preorder_stack(node* root)
{
    stack<node*>s;
    s.push(root);
    vector<int>ans;
    while(!s.empty())
    {
        node* temp=s.top();
        s.pop();
        ans.push_back(temp->data);
        if(temp->right);
        s.push(temp->right);
        if(temp->left)
        s.push(temp->left);

    }
    return ans;

}
vector<int>postorder_stack(node* root)
{
    stack<node*>s;
    s.push(root);
    vector<int>ans;
    while(!s.empty())
    {
        node* temp=s.top();
        s.pop();
        ans.push_back(temp->data);
        if(temp->left)
        s.push(temp->left);
        if(temp->right)
        s.push(temp->right);
    }
    int i=0;
    int j=ans.size()-1;
    while(i<=j)
    {
        swap(ans[i],ans[j]);
        i++;
        j--;
    }
    return ans;
}
int main()
{
    node* root=create_tree();
    preorder(root);
    cout<<endl;
    inorder(root);
    cout<<endl;
    postorder(root);
    cout<<endl;
    vector<int>ans;
    ans=level_order(root);
    for(int i=0;i<ans.size();i++)
    {
        cout<<ans[i]<<" ";
    }
    cout<<endl;
    vector<int>pre=preorder_stack(root);
    for(int i=0;i<pre.size();i++)
    {
        cout<<pre[i]<<" ";
    }
    cout<<endl;
    vector<int>post=postorder_stack(root);
    
        for(int i=0;i<post.size();i++)
        {
            cout<<post[i]<<" ";
        }
    


    return 0;
}
