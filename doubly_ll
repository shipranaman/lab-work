#include<iostream>
using namespace std;
class node
{
    public:
    int data;
    node* next;
    node* prev;
    node(int value)
    {
        data=value;
        prev=nullptr;
        next=nullptr;
    }

};
node* create_dll(int arr[], node* head,int n)
{
    node* temp;
    node* tail;
    for(int i=0;i<n;i++)
    {
        if(head==nullptr)
        {
            head=new node(arr[i]);
            tail=head;
        }
        else{
            temp=new node(arr[i]);
            temp->prev=tail;
            tail->next=temp;
            tail=temp;
            
        }
    }
    temp=head;
    while(temp!=nullptr)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    return head;
}
node* insert_start(node* head,int value)
{
    node* tail;
    if(head==nullptr)
    {
        head=new node(value);
        return head;
    }
    else{
        node* temp=new node(value);
        temp->next=head;
        head->prev=temp;
        head=temp;
    }
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    return head;

}
node* insert_end(node* head,int value)
{
    node* tail;
    if(head==nullptr)
    {
        head=new node(value);
        return head;

    }
    else{
        node* temp=head;
        while(temp->next!=nullptr)
        {
            temp=temp->next;
        }
         tail=new node(value);
        temp->next=tail;
        tail->prev=temp;

    }
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    return head;
}
node* insert_at_position(node* head,int pos,int value)
{
    node* previous=nullptr;
    node* temp=head;
    int size=pos-1;
    while(size--)
    {
        previous=temp;
        temp=temp->next;
    }
    node* tail;
    tail=new node(value);
    previous->next=tail;
    tail->prev=previous;
    tail->next=temp;
    temp->prev=tail;
    
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    return head;
}
node* delete_start(node* head)
{
    node* tail;
    if(head==nullptr)return head;
    if(head->next==nullptr) return nullptr;
    else{
        node* temp=head;
        head=head->next;
        delete temp;
    }
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    return head;
}
node* delete_end(node* head)
{
    node* tail;
    if(head==nullptr) return head;
    if(head->next==nullptr) return nullptr;
    node* previous=nullptr;
    node* temp=head;
    while(temp->next!=nullptr)
    {
        previous=temp;
        temp=temp->next;

    }
    previous->next=nullptr;
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
    return head;
}
node* delete_position(node* head,int pos)
{
    node* tail;
    node* temp=head;
    node* previous=nullptr;
    int size=pos-1;
    while(size--)
    {
        previous=temp;
        temp=temp->next;
    }
    previous->next=temp->next;
    temp->next->prev=previous;
    tail=head;
    while(tail!=nullptr)
    {
        cout<<tail->data<<" ";
        tail=tail->next;
    }
return head;


}
int main()
{
    int arr[5]={1,2,3,4,5};
    node* head=nullptr;
    head=create_dll(arr,head,5);
    cout<<endl;
    head=insert_start(head,6);
    cout<<endl;
    head=insert_end(head,7);
    cout<<endl;
    head=insert_at_position(head,3,8);
    cout<<endl;
    head=delete_start(head);
    cout<<endl;
    head=delete_end(head);
    cout<<endl;
    head=delete_position(head,3);
    cout<<endl;
    return 0;
}
