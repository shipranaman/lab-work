#include<iostream>
#include<vector>
using namespace std;
class heap
{
    public:
    int *arr;
    int size;
    int total_size;
    heap(int n)
    {
        size=0;
        total_size=n;
        arr=new int[n];

    }
    void create(int value)
    {
        if(size==total_size)
        {
            cout<<"heap overflow";
            return;

        }
        arr[size]=value;
        size++;

    }
    void heapify(int index,int size)
    {
        int largest=index;
        int left=2*index+1;
        int right=2*index+2;
        if(left<=size&&arr[left]<arr[largest])
        {
            largest=left;
        }
        if(right<=size&&arr[right]<arr[largest])
        {
            largest=right;
        }
        if(largest!=index)
        {
            swap(arr[largest],arr[index]);
            heapify(largest,size);
        }
    }
    void build_min_heap()
    {
        for(int i=(total_size-1)/2;i>=0;i--)
        {
            heapify(i,total_size);
        }
    }
    void print()
    {
        for(int i=0;i<total_size;i++)
        {
            cout<<arr[i]<<" ";
        }
    }
    void list(int k)
    {
        vector<int>ans;
        for(int i=0;i<k;i++)
        {
            ans.push_back(arr[0]);

        swap(arr[0],arr[size-1]);
        size--;
        heapify(0,size-1);
        }
        for(int i=0;i<k;i++)
        {
            cout<<ans[i]<<" ";
        }
        
    }

};
int main()
{
    heap h(6);
    h.create(6);
    h.create(4);
    h.create(14);
    h.create(11);
    h.create(12);
    h.create(84);
    h.build_min_heap();
    h.print();
    cout<<endl;
    h.list(3);
    return 0;



}
